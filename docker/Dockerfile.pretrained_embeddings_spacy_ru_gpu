# The image tagged with the 'spacy-it' suffix
ARG IMAGE_BASE_NAME
ARG BASE_IMAGE_HASH
ARG BASE_BUILDER_IMAGE_HASH

FROM ${IMAGE_BASE_NAME}:base-builder-${BASE_BUILDER_IMAGE_HASH} as builder

# copy files
COPY . /build/
COPY docker/configs/config_pretrained_embeddings_spacy_ru.yml /build/config.yml

# change working directory
WORKDIR /build

# install dependencies
RUN python -m venv /opt/venv && \
  . /opt/venv/bin/activate && pip install --no-cache-dir -U "pip==22.*" -U "wheel>0.38.0" -U "tensorrt==8.6.1"
RUN . /opt/venv/bin/activate && poetry install --extras spacy --no-dev --no-root --no-interaction
RUN . /opt/venv/bin/activate && poetry build -f wheel -n && \
  pip install --no-deps dist/*.whl && \
  rm -rf dist *.egg-info

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"

RUN python -m spacy download ru_core_news_md

# start a new build stage
FROM ${IMAGE_BASE_NAME}:base-${BASE_IMAGE_HASH} as runner

# copy everything from /opt
COPY --from=builder /opt/venv /opt/venv

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"
ENV LD_LIBRARY_PATH="/opt/venv/lib64/python3.8/site-packages/tensorrt_libs:/opt/venv/lib64/python3.8/site-packages/nvidia/cudnn/lib:$LD_LIBRARY_PATH"

RUN ln -s /opt/venv/lib64/python3.8/site-packages/tensorrt_libs/libnvinfer_plugin.so.8 /opt/venv/lib64/python3.8/site-packages/tensorrt_libs/libnvinfer_plugin.so.7
RUN ln -s /opt/venv/lib64/python3.8/site-packages/tensorrt_libs/libnvinfer.so.8 /opt/venv/lib64/python3.8/site-packages/tensorrt_libs/libnvinfer.so.7

# set HOME environment variable
ENV HOME=/app

# update permissions & change user to not run as root
WORKDIR /app
RUN chgrp -R 0 /app && chmod -R g=u /app && chmod o+wr /app
USER 1001

# Create a volume for temporary data
VOLUME /tmp

# change shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# the entry point
EXPOSE 5005
ENTRYPOINT ["rasa"]
CMD ["--help"]
